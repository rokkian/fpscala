[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/mrocco/workspace/fpscala/eg1010/src/main/scala/rationals.worksheet.sc","languageId":"scala","version":1,"text":"println(util.Properties.versionNumberString)\n\n// the primary constructor by default runs all the needed functions and methods in the body (eg requires, vals, defs..)\n// auxiliary constructors are created with methods named 'this'\nclass Rational(x: Int, y: Int):\n    require(y > 0, s\"denom must be positive!! was $x/$y\")\n\n    private def gcd(a: Int, b: Int): Int =\n        if b == 0 then a else gcd(b, a % b)\n\n    def this(x: Int) = this(x, 1) // auxiliary constructor\n    val numer = x\n    val denom = y // ricorda che la differenza tra def e val e' che val viene caolcolato una volta sola, mentre def viene ricalcolato ogni volta chiamato\n\n    def value: Double = x.toDouble / y.toDouble\n\n    def add(r: Rational)=\n        new Rational(((numer * r.denom)+(r.numer * denom)),  (denom * r.denom))\n\n    def mul(r: Rational)=\n        new Rational(numer * r.numer, denom * r.denom)\n\n    def neg =\n        new Rational(- numer, denom)\n    def sub(r: Rational) =\n        add(r.neg)\n\n    def less(that: Rational): Boolean =\n        numer * that.denom < that.numer * denom\n\n    def max(that: Rational): Rational =\n        if this.less(that) then that else this\n\n    override def toString: String = s\"${numer/ gcd(x.abs, y)}/${denom/ gcd(x.abs, y)}\"\nend Rational\n\n// extension methods:\n// aggiunge un pezzo di codice con metodi alla classe indicata\n// si possono aggiungere in moduli diversi, in modo indipendente\n// sono visibili quando in scope\n// possono solo aggiungere nuovi metodi, no overrides\n// non possono riferirsi agli altri class menmers using 'this'\nextension (r: Rational)\n    def min(s: Rational): Rational = if s.less(r) then s else r\n    def abs: Rational = Rational(r.numer.abs, r.denom)\n\nextension (r: Rational)\n    def + (y: Rational): Rational = x.add(y)\n    def - (y: Rational): Rational = x.sub(y)\n    def * (y: Rational): Rational = x.mul(y)\n\n// infix notation\nextension (x: Rational)\n    infix def <(that: Rational): Boolean = x.less(that)\n    infix def lesser(that: Rational): Boolean = x.less(that)\n\nnew Rational(-2, 3).abs\n\nassert(3 > 0, \"not ok!!\") // asserts are for assurance of good implementation of functions, require are for assurance on inputs\n\nnew Rational(1,2).add(new Rational(1,2)).toString\nnew Rational(1,2).mul(new Rational(1,2)).toString\nnew Rational(45,2).mul(new Rational(1,2)).toString\n\nval x = new Rational(1,3)\nval y = new Rational(5,7)\nval z = new Rational(3,2)\n\n// same infixi operation\ny < z\ny.<(z)\ny lesser z\n\nnew Rational(6, 3).numer\nnew Rational(6, 3).denom\nnew Rational(6, 3).toString\n\nx.sub(y).sub(z)\nx.less(y)\nx.max(y)\n\n\nz.neg\nz.sub(x)\nx.sub(y).sub(z)\n\nx.add(y).mul(z)\n\n// functions of Rationals\ndef addRational(x: Rational, y: Rational): Rational =\n    new Rational(((x.numer * y.denom)+(y.numer * x.denom)),  (x.denom * y.denom))\n\ndef subRational(x: Rational, y: Rational): Rational =\n    new Rational(((x.numer * y.denom)-(y.numer * x.denom)),  (x.denom * y.denom))\n\nval ar = new Rational(1, 2)\nval br = new Rational(2,3)\n\nar.value\nar.numer\nar.toString\n(addRational(ar, br).numer, addRational(ar, br).denom, addRational(ar, br).value)\n\nval s = 4\ns.toDouble\n\nprint(\"daje\")\nval j = new Rational(3,2)\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/home/mrocco/workspace/fpscala/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 1 s, completed Sep 5, 2023, 2:32:07 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
