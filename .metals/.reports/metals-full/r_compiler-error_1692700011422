file%3A%2F%2F%2Fhome%2Fmrocco%2Fworkspace%2Ffpscala%2Feg1010%2Fsrc%2Fmain%2Fscala%2Frationals.worksheet.sc:5: error: ; expected but : found
class Rational(x: Int, y: Int):
                              ^
occurred in the presentation compiler.

action parameters:
uri: file://<WORKSPACE>/eg1010/src/main/scala/rationals.worksheet.sc
text:
println(util.Properties.versionNumberString)

// the primary constructor by default runs all the needed functions and methods in the body (eg requires, vals, defs..)
// auxiliary constructors are created with methods named 'this'
class Rational(x: Int, y: Int):
    require(y > 0, s"denom must be positive!! was $x/$y")

    private def gcd(a: Int, b: Int): Int =
        if b == 0 then a else gcd(b, a % b)

    def this(x: Int) = this(x, 1) // auxiliary constructor
    val numer = x
    val denom = y // ricorda che la differenza tra def e val e' che val viene caolcolato una volta sola, mentre def viene ricalcolato ogni volta chiamato

    def value: Double = x.toDouble / y.toDouble

    def add(r: Rational)=
        new Rational(((numer * r.denom)+(r.numer * denom)),  (denom * r.denom))

    def mul(r: Rational)=
        new Rational(numer * r.numer, denom * r.denom)

    def neg =
        new Rational(- numer, denom)
    def sub(r: Rational) =
        add(r.neg)

    def less(that: Rational): Boolean =
        numer * that.denom < that.numer * denom

    def max(that: Rational): Rational =
        if this.less(that) then that else this

    override def toString: String = s"${numer/ gcd(x.abs, y)}/${denom/ gcd(x.abs, y)}"
end Rational

// extension methods:
// aggiunge un pezzo di codice con metodi alla classe indicata
// si possono aggiungere in moduli diversi, in modo indipendente
// sono visibili quando in scope
// possono solo aggiungere nuovi metodi, no overrides
// non possono riferirsi agli altri class menmers using 'this'
extension (r: Rational)
    def min(s: Rational): Rational = if s.less(r) then s else r
    def abs: Rational = Rational(r.numer.abs, r.denom)

extension (r: Rational)
    def + (y: Rational): Rational = x.add(y)
    def - (y: Rational): Rational = x.sub(y)
    def * (y: Rational): Rational = x.mul(y)

// infix notation
extension (x: Rational)
    infix def <(that: Rational): Boolean = x.less(that)
    infix def lesser(that: Rational): Boolean = x.less(that)

new Rational(-2, 3).abs

assert(3 > 0, "not ok!!") // asserts are for assurance of good implementation of functions, require are for assurance on inputs

new Rational(1,2).add(new Rational(1,2)).toString
new Rational(1,2).mul(new Rational(1,2)).toString
new Rational(45,2).mul(new Rational(1,2)).toString

val x = new Rational(1,3)
val y = new Rational(5,7)
val z = new Rational(3,2)

// same infixi operation
y < z
y.<(z)
y lesser z

new Rational(6, 3).numer
new Rational(6, 3).denom
new Rational(6, 3).toString

x.sub(y).sub(z)
x.less(y)
x.max(y)


z.neg
z.sub(x)
x.sub(y).sub(z)

x.add(y).mul(z)

// functions of Rationals
def addRational(x: Rational, y: Rational): Rational =
    new Rational(((x.numer * y.denom)+(y.numer * x.denom)),  (x.denom * y.denom))

def subRational(x: Rational, y: Rational): Rational =
    new Rational(((x.numer * y.denom)-(y.numer * x.denom)),  (x.denom * y.denom))

val ar = new Rational(1, 2)
val br = new Rational(2,3)

ar.value
ar.numer
ar.toString
(addRational(ar, br).numer, addRational(ar, br).denom, addRational(ar, br).value)

val s = 4
s.toDouble

print("daje")
val j = new Rational(3,2)





error stacktrace:
scala.meta.internal.parsers.Reporter.syntaxError(Reporter.scala:16)
	scala.meta.internal.parsers.Reporter.syntaxError$(Reporter.scala:16)
	scala.meta.internal.parsers.Reporter$$anon$1.syntaxError(Reporter.scala:22)
	scala.meta.internal.parsers.Reporter.syntaxError(Reporter.scala:17)
	scala.meta.internal.parsers.Reporter.syntaxError$(Reporter.scala:17)
	scala.meta.internal.parsers.Reporter$$anon$1.syntaxError(Reporter.scala:22)
	scala.meta.internal.parsers.ScalametaParser.syntaxErrorExpected(ScalametaParser.scala:367)
	scala.meta.internal.parsers.ScalametaParser.expect(ScalametaParser.scala:369)
	scala.meta.internal.parsers.ScalametaParser.accept(ScalametaParser.scala:373)
	scala.meta.internal.parsers.ScalametaParser.acceptStatSep(ScalametaParser.scala:389)
	scala.meta.internal.parsers.ScalametaParser.acceptStatSepOpt(ScalametaParser.scala:393)
	scala.meta.internal.parsers.ScalametaParser.statSeqBuf(ScalametaParser.scala:4357)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$batchSource$13(ScalametaParser.scala:4594)
	scala.Option.getOrElse(Option.scala:189)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$batchSource$1(ScalametaParser.scala:4594)
	scala.meta.internal.parsers.ScalametaParser.atPos(ScalametaParser.scala:300)
	scala.meta.internal.parsers.ScalametaParser.autoPos(ScalametaParser.scala:346)
	scala.meta.internal.parsers.ScalametaParser.batchSource(ScalametaParser.scala:4550)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$source$1(ScalametaParser.scala:4543)
	scala.meta.internal.parsers.ScalametaParser.atPos(ScalametaParser.scala:300)
	scala.meta.internal.parsers.ScalametaParser.autoPos(ScalametaParser.scala:346)
	scala.meta.internal.parsers.ScalametaParser.source(ScalametaParser.scala:4543)
	scala.meta.internal.parsers.ScalametaParser.entrypointSource(ScalametaParser.scala:4548)
	scala.meta.internal.parsers.ScalametaParser.parseSourceImpl(ScalametaParser.scala:127)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$parseSource$1(ScalametaParser.scala:124)
	scala.meta.internal.parsers.ScalametaParser.parseRuleAfterBOF(ScalametaParser.scala:51)
	scala.meta.internal.parsers.ScalametaParser.parseRule(ScalametaParser.scala:46)
	scala.meta.internal.parsers.ScalametaParser.parseSource(ScalametaParser.scala:124)
	scala.meta.parsers.Parse$.$anonfun$parseSource$1(Parse.scala:29)
	scala.meta.parsers.Parse$$anon$1.apply(Parse.scala:36)
	scala.meta.parsers.Api$XtensionParseDialectInput.parse(Api.scala:25)
	scala.meta.internal.semanticdb.scalac.ParseOps$XtensionCompilationUnitSource.toSource(ParseOps.scala:17)
	scala.meta.internal.semanticdb.scalac.TextDocumentOps$XtensionCompilationUnitDocument.toTextDocument(TextDocumentOps.scala:206)
	scala.meta.internal.pc.SemanticdbTextDocumentProvider.textDocument(SemanticdbTextDocumentProvider.scala:54)
	scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$semanticdbTextDocument$1(ScalaPresentationCompiler.scala:350)
